from cryptography.fernet import Fernet, InvalidToken
from flask import Flask
import sqlite3
import os

app = Flask(__name__)
DB_PATH = "cles_users.db"

# üìå Initialisation BDD si elle n'existe pas
def init_db():
    if not os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute('''
            CREATE TABLE users (
                username TEXT PRIMARY KEY,
                key TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

init_db()

# üì• G√©n√®re une cl√© pour un utilisateur et la sauvegarde
@app.route('/generate_key/<username>')
def generate_key(username):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    # V√©rifie si le user a d√©j√† une cl√©
    c.execute("SELECT key FROM users WHERE username = ?", (username,))
    result = c.fetchone()

    if result:
        # Ne reg√©n√®re pas la cl√©, renvoie l'existante
        key = result[0]
        message = f"Cl√© d√©j√† existante pour {username} : {key}"
    else:
        # Cr√©e une nouvelle cl√© uniquement si l'user est nouveau
        key = Fernet.generate_key().decode()
        c.execute("INSERT INTO users (username, key) VALUES (?, ?)", (username, key))
        conn.commit()
        message = f"Nouvelle cl√© g√©n√©r√©e pour {username} : {key}"

    conn.close()
    return message


# üîí Chiffre une valeur avec la cl√© du user
@app.route('/encrypt/<username>/<valeur>')
def encrypt(username, valeur):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT key FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()

    if result:
        key = result[0]
        f = Fernet(key.encode())
        token = f.encrypt(valeur.encode())
        return f"Valeur encrypt√©e : {token.decode()}"
    else:
        return f"Aucune cl√© trouv√©e pour l'utilisateur {username}"

# üîì D√©chiffre une valeur avec la cl√© du user
@app.route('/decrypt/<username>/<valeur>')
def decrypt(username, valeur):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT key FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()

    if result:
        key = result[0]
        f = Fernet(key.encode())
        try:
            decrypted = f.decrypt(valeur.encode())
            return f"Valeur d√©crypt√©e : {decrypted.decode()}"
        except InvalidToken:
            return "Erreur : le token ne correspond pas √† la cl√©."
    else:
        return f"Aucune cl√© trouv√©e pour l'utilisateur {username}"

# Page d'accueil
@app.route('/')
def home():
    return "Bienvenue sur l'API de chiffrement personnalis√©e üîê"

if __name__ == "__main__":
    app.run(debug=True)
